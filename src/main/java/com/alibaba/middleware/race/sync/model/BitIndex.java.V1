package com.alibaba.middleware.race.sync.model;

/**
 * Created by xiyuanbupt on 6/8/17.
 * 完成计数功能的bitIndex
 */
public class BitIndex {

    static public BitIndex INSTANCE = new BitIndex(1 << 21);
    private final long[] data;
    private final int[] counter; // 每64个long一个counter
    private final int counter_len;

    private BitIndex(int bits){ // bits must be (64 << 6) * n
        assert bits % (1<<12) == 0;
        this.data = new long[bits >>> 6];
        counter_len = bits >>> (6+6);
        this.counter = new int[counter_len];
    }

    public void initCounterCache(){
        for(int i = 0, len = counter.length; i<len; i++){
            counter[i] = 0;
            int start = i << 6;
            int end = (i+1)<<6;
            for(int j = start; j<end; j++){
                counter[i] += Long.bitCount(data[j]);
            }
            if(i>0)counter[i] += counter[i-1];
        }
    }

    public void fastSet(int index){
        data[(index >>> 6)] |= (1L << index);
    }

    public boolean set(int index){
        if (!get(index)) {
            data[(index >>> 6)] |= (1L << index);
            int i = index >>> 12;
            for(;i<counter_len; i++){
                counter[i] ++;
            }
            return true;
        }
        return false;
    }

    public boolean get(int index) {
        return (data[(index >>> 6)] & (1L << index)) != 0;
    }

    public int getIndex(int index){
        assert get(index);
        // 获得前面有多少个
        int res = 0;
        int counter_index = (index >>> 12) - 1;
        if(counter_index > -1){
            res = counter[counter_index];
        }
        // TODO 求本组64个long里面有多少bit
        int my_long_index = index >>> 6;
        int start_long_index = (my_long_index >>> 6) << 6;
        for(int i = start_long_index; i<my_long_index; i++){
            res += Long.bitCount(data[i]);
        }
        // 计算当前位有多少bit
        long my_long = data[my_long_index];
        my_long = my_long << (63 - (index & 0x3f));
        res += Long.bitCount(my_long);
        return res - 1;
    }

    protected void clear(){
        for(int i=0;i<data.length;i++){
            data[i] = 0L;
        }
        for(int j =0;j<counter.length;j++){
            counter[j] = 0;
        }
    }
}
